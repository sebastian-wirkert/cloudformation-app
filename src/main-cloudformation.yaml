---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  AppName:
    Description: The name of your app
    Type: String

  Env:
    Description: Is this a dev(elopment) or prod(uction) environment
    Default: dev
    Type: String
    AllowedValues:
      - dev
      - prod

  Color:
    Description: Is this the custumer facing (green) or tester facing (yellow) version. Both share same main-stack backbone. 
    Default: green
    Type: String
    AllowedValues:
      - green
      - yellow

  CurrentGitHash:
    Description: The git hash for the uploaded functions
    Type: String

  LambdaBucket:
    Description: The bucket to upload the zipped lambda functions to
    Type: String

  LambdaFolder:
    Description: The folder in the bucket your functions are uploaded to
    Type: String

  MainGraphQLAuthenticationMethod:
    Description: The main way to authenticate to graphql api
    Type: String
    Default: AWS_IAM
    AllowedValues:
      - API_KEY
      - AWS_IAM
      - AMAZON_COGNITO_USER_POOLS
      - OPENID_CONNECT

  DBInstanceID:
    Default: dbinstance
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.

  DBName:
    Description: Name of the database
    Type: String

  DBSnapshot:
    Description: Arn for the initial loading of the database
    Type: String
    ConstraintDescription: arn of database snapshot
    
  DBUser:
    Description: Master user name
    Type: String

  DBPassword:
    Description: Master user password
    Type: String

  DBCreate:
    Description: Should database be created. Creation causes costs and takes a while.
    Default: 'false'
    Type: String
    AllowedValues: [true, false]

  S3BucketName:
    Type: String
    Description: "S3 bucket to create."
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"

  DirsToCreate:
    Description: "Comma delimited list of directories to create."
    Type: CommaDelimitedList


Conditions: 
  CreateDatabase: !Equals [ !Ref DBCreate, true ]

Resources:

  # allow lambda access to everything it needs (e.g. s3 and rds)
  # could be scoped down more fine grained for differing lambda function, but I think it's ok for now
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-${Env}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole        
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
      Policies:
      - PolicyName: AWSLambdaBasicExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: s3Access 
        PolicyDocument:
          Statement:
          - Action:
            - s3:PutObject
            - s3:DeleteObject
            - s3:List*
            Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::${S3Bucket}/*
            - !Sub arn:aws:s3:::${S3Bucket}
          Version: '2012-10-17'
    DependsOn: 
      - RDSAccessPolicy

  RDSAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow access to database and the secrets
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: 
              - "rds-data:DeleteItems"
              - "rds-data:ExecuteSql"
              - "rds-data:ExecuteStatement"
              - "rds-data:GetItems"
              - "rds-data:InsertItems"
              - "rds-data:UpdateItems"
            Resource: 
              - !Sub arn:aws:rds:*:*:cluster:${Database}
              - !Sub arn:aws:rds:*:*:cluster:${Database}:*
          - Effect: "Allow"
            Action: "secretsmanager:GetSecretValue"
            Resource: 
              - !Ref RDSAuroraClusterMasterSecret
              - !Sub ${RDSAuroraClusterMasterSecret}:*

  # User authentification setup props to
  # https://adrianhall.github.io/cloud/2018/04/17/deploy-an-aws-appsync-graphql-api-with-cloudformation/
  # https://gist.github.com/singledigit/2c4d7232fa96d9e98a3de89cf6ebe7a5
  # amplify generated cloudformation templates
  # https://gist.github.com/mtinra/ce7c4f60c94882839f2890b91f5e0978

  SNSRole:
    Type: AWS::IAM::Role
    Properties:      
      Description: "An IAM Role to allow Cognito to send SNS messages"
      RoleName: !Sub ${AppName}-${Env}-cognito-sns-role
      ManagedPolicyArns:
        - !Ref CognitoSNSPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - cognito-idp.amazonaws.com
    DependsOn:
      - CognitoSNSPolicy

  CognitoSNSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow Amazon Cognito to access SNS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:publish
            Resource: "*"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-${Env}-user-pool
      # TODO after somewhat finalized:
      # UpdateReplacePolicy: Retain
      Policies:
        PasswordPolicy:
            MinimumLength: 6
            RequireUppercase: false
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            TemporaryPasswordValidityDays: 7
      AutoVerifiedAttributes:
        - email
      UsernameAttributes: [email]
      VerificationMessageTemplate:
          EmailSubject: Dein Betsby Code
          EmailMessage: Toll dich dabei zu haben, jetzt nur noch schnell den Code {####} eingeben
          DefaultEmailOption: CONFIRM_WITH_CODE
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: sub
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: false
          Required: true
          StringAttributeConstraints:
              MinLength: "1"
              MaxLength: "2048"
      # TODO Email config
      #EmailConfiguration:
      #  SourceArn: arn:aws:ses:eu-west-1:229294447586:identity/hello@betsby.de
      #  EmailSendingAccount: COGNITO_DEFAULT

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${AppName}-${Env}-appsync-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
    
  # Creates a federated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${AppName}-${Env}-Identity
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
  
  # Create a role for unauthorized access to AWS resources. 
  # Very limited access. Only allows users in the previously created Identity Pool
  # The logic stack will adds policies to access the api
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Create a role for authorized acces to AWS resources. Control what your user can access. 
  # Only allows users in the previously created Identity Pool
  # The logic stack will adds policies to access the api
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
  
  AppsyncLamdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Env}-AppsyncLamdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:        
        - Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: allow-access-to-lambda-from-appsync
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
            - Effect: Allow
              Action: lambda:invokeFunction
              Resource: "arn:aws:lambda:*"

  AppsyncRDSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Env}-AppsyncRDSRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:        
        - Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref RDSAccessPolicy
    DependsOn: 
      - RDSAccessPolicy

  # Database stuff props to:
  # https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/aws-properties-rds-dbcluster-scalingconfiguration.html
  # https://gist.github.com/sjparkinson/e1c2f74475d2e8625ce4af85b892ab13#file-rds-aurora-cloudformation-example-yaml-L176
  # https://acloudguru.com/blog/engineering/getting-started-with-the-amazon-aurora-serverless-data-api?utm_source=medium_blog&utm_medium=redirect&utm_campaign=medium_blog
  # https://s3.amazonaws.com/cloudformation-templates-useast-1/rds-aurora-serverless/rds-aurora-serverless.yml
  # TODO: export environment to add to lambda
  Database:
    Type: AWS::RDS::DBCluster
    Condition: CreateDatabase
    Properties: 
      #BackupRetentionPeriod: 7
      DBClusterIdentifier: !Sub ${AppName}-${Env}-cluster
      EnableHttpEndpoint: True
      Engine: aurora
      EngineMode: serverless      
      #MasterUsername: !Ref DBUsername
      #MasterUserPassword: !Ref DBPassword
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 1 # this should be at least two for production use cases according to documentation
        MaxCapacity: 32
        SecondsUntilAutoPause: 1000
      #PreferredBackupWindow: 01:00-02:00
      SnapshotIdentifier: !Ref DBSnapshot

  RDSAuroraClusterMasterSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: DatabaseMasterSecret
      Description: This contains the RDS Master user credentials for RDS Aurora Serverless Cluster
      SecretString: 
        !Sub |
          {
            "username": "${DBUser}",
            "password": "${DBPassword}"
          }

  # s3 bucket generation with folder list props to: https://aws.amazon.com/de/premiumsupport/knowledge-center/cloudformation-s3-custom-resources/
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppName}-${Env}-${S3BucketName}
      AccessControl: Private

  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt S3DirectoryCreateFunction.Arn
      the_bucket: !Sub ${AppName}-${Env}-${S3BucketName}
      dirs_to_create: !Ref DirsToCreate
  
  S3DirectoryCreateFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Create directories for S3 Buckets!"
      FunctionName: !Sub ${AppName}-${Env}-s3-setup
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Runtime: python3.6
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Sub "${LambdaFolder}/s3setupfunction_src${CurrentGitHash}.zip"

  # Add cloudfront to s3 
  # Props to https://hackernoon.com/how-to-configure-cloudfront-using-cloudformation-template-2c263u56
  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'origin identity'
    
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
            Action: 's3:GetObject'
            Resource: !Sub ${S3Bucket.Arn}/*
  
  publicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: S3-private-bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
        Enabled: True
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3-private-bucket
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: True

Outputs:
  region:
    Value: !Sub "${AWS::Region}"
  userPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AppName}-${Env}-UserPool
  identityPoolId:
    Value: !Ref IdentityPool
    Export:
      Name: !Sub ${AppName}-${Env}-IdentityPool
  userPoolWebClientId:
    Value: !Ref UserPoolClient
  lambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AppName}-${Env}-LambdaExecutionRoleArn
  appsyncRDSRoleArn:
    Value: !GetAtt AppsyncRDSRole.Arn
    Export:
      Name: !Sub ${AppName}-${Env}-AppsyncRDSRoleArn
  appsyncLambdaRoleArn:
    Value: !GetAtt AppsyncLamdaRole.Arn
    Export:
      Name: !Sub ${AppName}-${Env}-AppsyncLambdaRoleArn
  cognitoAuthorizedRole:
    Value: !Ref CognitoAuthorizedRole
    Export:
      Name: !Sub ${AppName}-${Env}-CognitoAuthorizedRole
  cognitoUnAuthorizedRole:
    Value: !Ref CognitoUnAuthorizedRole
    Export:
      Name: !Sub ${AppName}-${Env}-CognitoUnAuthorizedRole
  mainGraphQLAuthenticationMethod:
    Value: !Ref MainGraphQLAuthenticationMethod
  cloudFrontDomainName:
    Value: !GetAtt publicDistribution.DomainName
    Export:
      Name: !Sub ${AppName}-${Env}-CloudFrontDomainName
  dbHttpEndpoint:
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub ${AppName}-${Env}-DBEndpoint
  dbSecretsArn:
    Value: !Ref RDSAuroraClusterMasterSecret
    Description: AWS Secrets Arn 
    Export:
      Name: !Sub ${AppName}-${Env}-dbsecrets
  dbClusterArn:
    Value: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${Database}
    Description: arn of the db cluster
    Export:
      Name: !Sub ${AppName}-${Env}-dbclusterarn