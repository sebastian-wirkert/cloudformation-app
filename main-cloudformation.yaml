---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  AppName:
    Description: The name of your app
    Type: String

  Stage:
    Description: Is this a dev(elopment) or prod(uction) environment
    Default: dev
    Type: String
    AllowedValues:
      - dev
      - prod

  LambdaBucket:
    Description: The bucket to upload the zipped lambda functions to
    Type: String

  LambdaFolder:
    Description: The folder in the bucket your functions are uploaded to
    Type: String

  MainGraphQLAuthenticationMethod:
    Description: The main way to authenticate to graphql api
    Type: String
    Default: AMAZON_COGNITO_USER_POOLS
    AllowedValues:
      - API_KEY
      - AWS_IAM
      - AMAZON_COGNITO_USER_POOLS
      - OPENID_CONNECT

Resources:

  # Lambda setup, props to 
  # https://medium.com/@garry.passarella/create-and-deploy-an-aws-lambda-function-with-aws-cloudformation-583d5a2b1df0


  DummyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DummyFunction
      Handler: app.handler
      Role:
        !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Sub "${LambdaFolder}/dummyfunction_src.zip"
      Runtime: python3.7
      Timeout: 25

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole        
      Path: "/"
      Policies:
      - PolicyName: AWSLambdaBasicExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"

  # User authentification setup props to
  # https://adrianhall.github.io/cloud/2018/04/17/deploy-an-aws-appsync-graphql-api-with-cloudformation/
  # https://gist.github.com/singledigit/2c4d7232fa96d9e98a3de89cf6ebe7a5
  # amplify generated cloudformation templates

  SNSRole:
    Type: AWS::IAM::Role
    Properties:      
      Description: "An IAM Role to allow Cognito to send SNS messages"
      RoleName: !Sub ${AppName}-${Stage}-cognito-sns-role
      ManagedPolicyArns:
        - !Ref CognitoSNSPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - cognito-idp.amazonaws.com
    DependsOn:
      - CognitoSNSPolicy

  CognitoSNSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow Amazon Cognito to access SNS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:publish
            Resource: "*"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-${Stage}-user-pool
      # TODO after somewhat finalized:
      # UpdateReplacePolicy: Retain
      Policies:
        PasswordPolicy:
            MinimumLength: 6
            RequireUppercase: false
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            TemporaryPasswordValidityDays: 7
      AutoVerifiedAttributes:
        - email
      #UsernameAttributes: [email]
      VerificationMessageTemplate:
          EmailSubject: Dein Betsby Code
          EmailMessage: Toll dich dabei zu haben, jetzt nur noch schnell den Code {####} eingeben
          DefaultEmailOption: CONFIRM_WITH_CODE
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: sub
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: false
          Required: true
          StringAttributeConstraints:
              MinLength: "1"
              MaxLength: "2048"
      # TODO Email config
      #EmailConfiguration:
      #  SourceArn: arn:aws:ses:eu-west-1:229294447586:identity/hello@betsby.de
      #  EmailSendingAccount: COGNITO_DEFAULT

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${AppName}-${Stage}-appsync-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
    
  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${AppName}-${Stage}-Identity
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
  
  # Create a role for unauthorized access to AWS resources. 
  # Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "appsync:GraphQL"
                Resource:
                  - !Sub "${AppSyncApi.Arn}/types/Query/fields/${AppSyncResolverGetShow.FieldName}"

  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
  
  # Appsync API. props to
  # https://adrianhall.github.io/cloud/2018/04/17/deploy-an-aws-appsync-graphql-api-with-cloudformation/
  # https://github.com/sbstjn/appsync-resolvers-example/blob/master/template.yml
  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      AuthenticationType: !Ref MainGraphQLAuthenticationMethod
      #AdditionalAuthenticationProviders: 
      #  - AuthenticationType: "AWS_IAM"
      Name: !Sub "${AppName}-${Stage}-Api"
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: "ALLOW"
        
  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      # TODO: replace by our own schema
      Definition: |

        type Show {
          sID: ID!
          sName: String
          description: String
        }

        type Shows {
          shows: [Show!]!
          nextToken: String
        }

        type Query {
          allShows(limit: Int, nextToken: String): Shows!
          getShow(sID: ID!): Show
        }

        type Mutation {
          saveShow(sID: ID!, sName: String!, description: String!): Show
          deleteShow(sID: ID!): Show
        }

        type Schema {
          query: Query
          mutation: Mutation
        }

  
  AppsyncLamdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-${Stage}-AppsyncLamdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:        
        - Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: allow-access-to-lambda-from-appsync
        PolicyDocument: 
          Version: 2012-10-17
          Statement: 
            - Effect: Allow
              Action: lambda:invokeFunction
              Resource: "arn:aws:lambda:*"
    

  AppSyncDataSourceDummyFunction:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: handler
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt DummyFunction.Arn
      ServiceRoleArn: !GetAtt AppsyncLamdaRole.Arn


  AppSyncResolverGetShow:
    Type: AWS::AppSync::Resolver    
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getShow
      DataSourceName: !GetAtt AppSyncDataSourceDummyFunction.Name
      RequestMappingTemplate: '{ "version" : "2017-02-28", "operation": "Invoke", "payload": { "resolve": "query.getShow", "context": $utils.toJson($context) } }'
      ResponseMappingTemplate: $util.toJson($context.result)

Outputs:
  region:
    Value: !Sub "${AWS::Region}"
  userPoolID:
    Value: !Ref UserPool
  identityPoolID:
    Value: !Ref IdentityPool
  graphQLEndpoint:
    Value: !GetAtt AppSyncApi.GraphQLUrl
  mainGraphQLAuthenticationMethod:
    Value: !Ref MainGraphQLAuthenticationMethod
  userPoolClientID:
    Value: !Ref UserPoolClient