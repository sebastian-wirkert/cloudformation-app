---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  
  AppName:
    Description: The name of your app
    Type: String

  Env:
    Description: Is this a dev(elopment) or prod(uction) environment
    Default: dev
    Type: String
    AllowedValues:
      - dev
      - prod

  Color:
    Description: Is this the custumer facing (green) or tester facing (yellow) version. Both share same main-stack backbone. 
    Default: green
    Type: String
    AllowedValues:
      - green
      - yellow

  CurrentGitHash:
    Description: The git hash for the uploaded functions
    Type: String

  LambdaBucket:
    Description: The bucket to upload the zipped lambda functions to
    Type: String

  LambdaFolder:
    Description: The folder in the bucket your functions are uploaded to
    Type: String

  MainGraphQLAuthenticationMethod:
    Description: The main way to authenticate to graphql api
    Type: String
    Default: AWS_IAM
    AllowedValues:
      - API_KEY
      - AWS_IAM
      - AMAZON_COGNITO_USER_POOLS
      - OPENID_CONNECT

  DBSnapshot:
    Description: Username for MySQL database access
    Type: String
    ConstraintDescription: arn of database snapshot

Resources:
  
  # Appsync API. props to
  # https://adrianhall.github.io/cloud/2018/04/17/deploy-an-aws-appsync-graphql-api-with-cloudformation/
  # https://github.com/sbstjn/appsync-resolvers-example/blob/master/template.yml
  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      AuthenticationType: !Ref MainGraphQLAuthenticationMethod
      Name: !Sub "${AppName}-${Env}-${Color}-Api"
      UserPoolConfig:
        UserPoolId: 
          Fn::ImportValue: !Sub ${AppName}-${Env}-UserPool
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: "ALLOW"
        

  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      # TODO: replace by our own schema
      Definition: |

        type Show {
          sID: ID!
          sName: String
          description: String
        }

        type Shows {
          shows: [Show!]!
          nextToken: String
        }

        type Query {
          allShows(limit: Int, nextToken: String): Shows!
          getShow(sID: ID!): Show
        }

        type Mutation {
          saveShow(sID: ID!, sName: String!, description: String!): Show
          deleteShow(sID: ID!): Show
        }

        type Schema {
          query: Query
          mutation: Mutation
        }


  # Lambda setup, props to 
  # https://medium.com/@garry.passarella/create-and-deploy-an-aws-lambda-function-with-aws-cloudformation-583d5a2b1df0

  AuthorizedAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow for authorized api access 
      Roles:
        - Fn::ImportValue: !Sub ${AppName}-${Env}-CognitoAuthorizedRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - "appsync:GraphQL"
            Resource:
              - !Sub 
                - "${AppSyncApiArn}/types/Mutation/fields/${AppSyncResolver}"
                - AppSyncApiArn: !GetAtt AppSyncApi.Arn 
                  AppSyncResolver: !GetAtt AppSyncResolverDeleteShow.FieldName


  UnauthorizedAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow for both unauthorized and authorized api access 
      Roles:
        - Fn::ImportValue: !Sub ${AppName}-${Env}-CognitoAuthorizedRole
        - Fn::ImportValue: !Sub ${AppName}-${Env}-CognitoUnAuthorizedRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - "appsync:GraphQL"
            Resource:
              - !Sub 
                - "${AppSyncApiArn}/types/Query/fields/${AppSyncResolver}"
                - AppSyncApiArn: !GetAtt AppSyncApi.Arn 
                  AppSyncResolver: !GetAtt AppSyncResolverGetShow.FieldName


  DummyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AppName}-${Env}-${Color}-DummyFunction
      Handler: app.handler
      Role:
        Fn::ImportValue: !Sub ${AppName}-${Env}-LambdaExecutionRoleArn
      Runtime: python3.7
      Timeout: 25
      Layers:
        - !Ref Layer
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Sub "${LambdaFolder}/dummyfunction_src${CurrentGitHash}.zip"


  Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub ${AppName}-${Env}-${Color}-rdsandpushlayer
      CompatibleRuntimes: 
        - python3.7
      Content:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Sub "${LambdaFolder}/layer_src${CurrentGitHash}.zip"


  AppSyncDataSourceDummyFunction:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: handler
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt DummyFunction.Arn
      ServiceRoleArn: 
        Fn::ImportValue: !Sub ${AppName}-${Env}-AppsyncLambdaRoleArn 


  AppSyncResolverGetShow:
    Type: AWS::AppSync::Resolver    
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getShow
      DataSourceName: !GetAtt AppSyncDataSourceDummyFunction.Name
      RequestMappingTemplate: '{ "version" : "2017-02-28", "operation": "Invoke", "payload": { "resolve": "query.getShow", "context": $utils.toJson($context) } }'
      ResponseMappingTemplate: $util.toJson($context.result)


  AppSyncResolverDeleteShow:
    Type: AWS::AppSync::Resolver    
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteShow
      DataSourceName: !GetAtt AppSyncDataSourceDummyFunction.Name
      RequestMappingTemplate: '{ "version" : "2017-02-28", "operation": "Invoke", "payload": { "resolve": "mutation.deleteShow", "context": $utils.toJson($context) } }'
      ResponseMappingTemplate: $util.toJson($context.result)

Outputs:

  appSyncApi:
    Value: !Ref AppSyncApi
    Export:
      Name: !Sub ${AppName}-${Env}-${Color}-AppSyncApi
  appSyncApiId:
    Value: !GetAtt AppSyncApi.ApiId
    Export:
      Name:
        !Sub ${AppName}-${Env}-${Color}-AppSyncApiId
  graphQLEndpoint:
    Value: !GetAtt AppSyncApi.GraphQLUrl